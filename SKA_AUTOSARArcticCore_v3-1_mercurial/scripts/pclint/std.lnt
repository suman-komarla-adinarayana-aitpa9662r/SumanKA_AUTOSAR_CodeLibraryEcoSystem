//  Gnu C/C++ (version 2.95.3 or later), -si4 -sp4, 
//  Standard lint options

///////////////////////////////////////////////////////////////////////////////////////////////////
// GLOBAL SETTINGS 
// 

// Use C99 standard
-A(C99)


///////////////////////////////////////////////////////////////////////////////////////////////////
// OUTPUT FORMAT 
// 

//append output to file
//+os(lintOutput.TMP) 

//append error output to file
//+oe(lintErrorOutput.TMP)

// Message format
+ffn // force full path names
-width(0) // don't insert line breaks (unlimited output width).
-hf1 // message height one
-format=%f:%l:%c:\s%t:\s%n\sPC-lint:\s%m

// Increase lint line buffer
+linebuf

///////////////////////////////////////////////////////////////////////////////////////////////////
// MISRA RULES TURNED OFF 
// The following rules delibrately turned off

// Lint produces a lot of false positives for the MISRA 2012 essential type checking
// Strrong type checking is also enables and which does similiar checking
// Expression assigned to a narrower or different essential type [MISRA 2012 Rule 10.3, required]
-e9034
//Mismatched essential type categories for binary operator [MISRA 2012 Rule 10.4, required]
-e9029
//Impermissible cast; cannot cast from 'essentially signed' to 'essentially Boolean' [MISRA 2012 Rule 10.5, advisory]
-e9030

// tag 'tag name 'unused outside of typedefs [MISRA 2012 Rule 2.4, advisory]
// This is widely used in Freescale register files.
-e9058

// Global wrap-up seems buggy
-e714 

// Allow do ... while(0);
-e717 

// A function should be used in preference to a function style macro MISRA 2004 Rule 19.7, advisory
-esym(961, 19.7) 

// The #  and ## should not be user MISRA 2004 Rule 19.13, advisory, MISRA 2012 rule 20.10, advisory
-esym(961, 19.13)
-e9024

// Unions shall not be used. MISRA 2004 18.4 Rule 18.4, required
-esym(960, 18.4) 

// Rules ok to remove by autosar:
// Note 960: Violates MISRA 2004 Required Rule 14.3, null statement not in line by itself
-esym(960,14.3)

// C comment contains C++ comment. MISRA 2012 Rule 3.1, required
-e9059

// Function-like macro, MISRA 2012 Directive 4.9, advisory
-e9026

// non-hidden is full of false positives
-e9045


///////////////////////////////////////////////////////////////////////////////////////////////////
// OTHER RULES TO TURNED OFF 
// The following rules delibrately turned off

// Repeated include files
-e537 

// Global macro defined in header file but not used
// May be used in other configurations
-e755 

// Global typedef defined in header file but not used
// May be used in other configurations
-e756

// Global declarator defined in header file but not used
// May be used in other configurations
-e757

// Global struct defined in header file but not used
// May be used in other configurations
-e758

// Global struct member defined in header file but not used
// May be used in other configurations
-e768 

// Global enum constant defined in header file but not used
// May be used in other configurations
-e769 

// Header file not used in module...
-e766 

//  ANSI/ISO limit of 31 'significant characters in an external identifier
-e793
-idlen(256)

// Extraneous comma ignored
-e726

// Enum constant 'Symbol' not used within defaulted switch
-e788 

// location cited in prior message
-e830  

// reference cited in prior message
-e831 

// duplicate initialization, using the .variable in struct initialization
-e485  

// local macro not referenced
-e750

// a zero given as argument to an operator
-e835

// Disabling 9045 for __locale_struct to make it work on linux build server using gcclint
-esym(9045, *locale_struct)


// Do not check the following symbols-function(__assert,ASSERT)
-emacro(506, ASSERT)
-emacro(731, ASSERT)
-emacro(774, ASSERT)
-emacro(9027, ASSERT)
-emacro(9033, ASSERT)
-emacro(506, TEST_ASSERT)
-emacro(774, TEST_ASSERT)
-emacro(9036, TEST_ASSERT)
-emacro(1776, new_TestFixture)
-emacro(506, assert)
-emacro(731, assert)
-emacro(774, assert)
-emacro(9027, assert)
-emacro(9033, assert)
-emacro(506, TEST_FAIL)
-emacro(960, ISR_INSTALL_ISR2)
-emacro(9036, ISR_INSTALL_ISR2)
-emacro(641, ISR_INSTALL_ISR2)

// Do not check deprecation of the following symbols
-esym(586, abort)

// Add use of typeof(..)
-dtypeof=_to_semi
+rw(_to_semi)

// For assembler macros use. 
//+rw(_up_to_brackets) 
//-dget_spr=_up_to_brackets
//-dget_spr=_to_semi

//-emacro( 923 , get_spr, set_spr )
//-emacro( 950 , get_spr, set_spr )
//-emacro( 530 , get_spr, set_spr )


// A subset of the -u warnings 
-e526
-e552
-e628

/* Note: 9019 PC-lint: declaration of 'XXX' before #include [MISRA 2012 Rule 20.1, advisory] */
-e9019 


///////////////////////////////////////////////////////////////////////////////////////////////////
// STRONG TYPING SETTINGS
// 
-fdd
-strong(AczJc)

// Turn off strong type assignment checking for vuint32_t, which is used in freescale header files for hardware register definitions
-strong(,vuint32_t)

// The type hierarchy is set in Arc_Types.h. The typedefs in that file overwrites settings here.
